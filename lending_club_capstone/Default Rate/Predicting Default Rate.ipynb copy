{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project Idea 5: Survival Time Analysis\n",
    "- A loan which gets repaid within a few months has no value to the investor.\n",
    "- It is negative to the investors beacause of the **opportunity cost** of investing.\n",
    "- A loan which defaults quickly after issuance is even worse. It often induces\n",
    "a larger loss.\n",
    "- Thus it is very important for the loan investor to have an accurate expectation on \n",
    "the loan-performance (in terms of duration or net PnL).\n",
    "It is even more important when the loan is sold by the original investor to\n",
    "the secondary market, a correct expectation on the remaining term of the loan and\n",
    "the default rate is crucial for a correct pricing of the loan.\n",
    "https://www.lendingclub.com/investing/investor-education/are-lendingclub-notes-liquid\n",
    "- Build models to predict loan duration (last_payment_date - issuance_date)\n",
    "for charged off/default loans and for good loans which terminate with 'fully paid' status.\n",
    "- Build models to predict total profits/losses (or total principal/interest)\n",
    "\n",
    "- Show evidences to link the loan-duration and the PnL, which may justify\n",
    "training a joint model predicting multi-regression-targets.\n",
    "\n",
    "- Modeling the survival of loans is a very important topic across different domains.\n",
    "In health care/health insurance it is usually called survival analysis.\n",
    "In modeling product life expectancy, engineers use a different term reliability analysis.\n",
    "The same type of thought can be used on financial instrument default or marketing/customer retention.\n",
    "- Note that there is an add-on survival analysis package 'scikit-survival' on top of **sklearn**.\n",
    "There are a ton of packages in R dedicated to survival analysis, visit\n",
    "https://cran.r-project.org/web/views/Survival.html for a survey.\n",
    "- You can either start from scratch or adapt the traditional approach of\n",
    "survival/hazard analysis. In the latter approach, you need to read research papers effectively."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Importing Data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from lifelines import KaplanMeierFitter\n",
    "from datetime import datetime as dt\n",
    "from datetime import timedelta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jameskim/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3058: DtypeWarning: Columns (0,19,49,59,118,129,130,131,134,135,136,139,145,146,147) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "accepted = pd.read_csv('accepted_2007_to_2018Q4.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>member_id</th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>funded_amnt</th>\n",
       "      <th>funded_amnt_inv</th>\n",
       "      <th>term</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>installment</th>\n",
       "      <th>grade</th>\n",
       "      <th>sub_grade</th>\n",
       "      <th>...</th>\n",
       "      <th>hardship_payoff_balance_amount</th>\n",
       "      <th>hardship_last_payment_amount</th>\n",
       "      <th>disbursement_method</th>\n",
       "      <th>debt_settlement_flag</th>\n",
       "      <th>debt_settlement_flag_date</th>\n",
       "      <th>settlement_status</th>\n",
       "      <th>settlement_date</th>\n",
       "      <th>settlement_amount</th>\n",
       "      <th>settlement_percentage</th>\n",
       "      <th>settlement_term</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>678855</td>\n",
       "      <td>79532225</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>9.16</td>\n",
       "      <td>382.50</td>\n",
       "      <td>B</td>\n",
       "      <td>B2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2109836</td>\n",
       "      <td>122996286</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>10.42</td>\n",
       "      <td>389.58</td>\n",
       "      <td>B</td>\n",
       "      <td>B3</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>212589</td>\n",
       "      <td>55441559</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5500.0</td>\n",
       "      <td>5500.0</td>\n",
       "      <td>5500.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>10.99</td>\n",
       "      <td>180.04</td>\n",
       "      <td>B</td>\n",
       "      <td>B4</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>303286</td>\n",
       "      <td>46734685</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>11.53</td>\n",
       "      <td>164.96</td>\n",
       "      <td>B</td>\n",
       "      <td>B5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1233208</td>\n",
       "      <td>21090740</td>\n",
       "      <td>NaN</td>\n",
       "      <td>27525.0</td>\n",
       "      <td>27525.0</td>\n",
       "      <td>27525.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>16.29</td>\n",
       "      <td>673.61</td>\n",
       "      <td>D</td>\n",
       "      <td>D2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 151 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                id  member_id  loan_amnt  funded_amnt  funded_amnt_inv  \\\n",
       "678855    79532225        NaN    12000.0      12000.0          12000.0   \n",
       "2109836  122996286        NaN    12000.0      12000.0          12000.0   \n",
       "212589    55441559        NaN     5500.0       5500.0           5500.0   \n",
       "303286    46734685        NaN     5000.0       5000.0           5000.0   \n",
       "1233208   21090740        NaN    27525.0      27525.0          27525.0   \n",
       "\n",
       "               term  int_rate  installment grade sub_grade  ...  \\\n",
       "678855    36 months      9.16       382.50     B        B2  ...   \n",
       "2109836   36 months     10.42       389.58     B        B3  ...   \n",
       "212589    36 months     10.99       180.04     B        B4  ...   \n",
       "303286    36 months     11.53       164.96     B        B5  ...   \n",
       "1233208   60 months     16.29       673.61     D        D2  ...   \n",
       "\n",
       "        hardship_payoff_balance_amount hardship_last_payment_amount  \\\n",
       "678855                             NaN                          NaN   \n",
       "2109836                            NaN                          NaN   \n",
       "212589                             NaN                          NaN   \n",
       "303286                             NaN                          NaN   \n",
       "1233208                            NaN                          NaN   \n",
       "\n",
       "        disbursement_method  debt_settlement_flag debt_settlement_flag_date  \\\n",
       "678855                 Cash                     N                       NaN   \n",
       "2109836                Cash                     N                       NaN   \n",
       "212589                 Cash                     N                       NaN   \n",
       "303286                 Cash                     N                       NaN   \n",
       "1233208                Cash                     N                       NaN   \n",
       "\n",
       "        settlement_status settlement_date settlement_amount  \\\n",
       "678855                NaN             NaN               NaN   \n",
       "2109836               NaN             NaN               NaN   \n",
       "212589                NaN             NaN               NaN   \n",
       "303286                NaN             NaN               NaN   \n",
       "1233208               NaN             NaN               NaN   \n",
       "\n",
       "        settlement_percentage settlement_term  \n",
       "678855                    NaN             NaN  \n",
       "2109836                   NaN             NaN  \n",
       "212589                    NaN             NaN  \n",
       "303286                    NaN             NaN  \n",
       "1233208                   NaN             NaN  \n",
       "\n",
       "[5 rows x 151 columns]"
      ]
     },
     "execution_count": 281,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accepted.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Data Pre-Processing\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [],
   "source": [
    "accepted['issue_date'] = pd.to_datetime(accepted['issue_d'])\n",
    "accepted['issue_d'] = accepted['issue_date'].apply(lambda x: str(x)[:7])\n",
    "accepted['last_pymnt_date'] = pd.to_datetime(accepted['last_pymnt_d'])\n",
    "accepted['paid_months'] = (accepted['last_pymnt_date'].dt.year - accepted['issue_date'].dt.year) * 12 + accepted['last_pymnt_date'].dt.month - accepted['issue_date'].dt.month\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>issue_date</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>paid_months</th>\n",
       "      <th>last_pymnt_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>937525</td>\n",
       "      <td>2017-05-01</td>\n",
       "      <td>Current</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2019-03-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>518949</td>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>Current</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2019-03-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>511071</td>\n",
       "      <td>2018-01-01</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2019-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>720591</td>\n",
       "      <td>2016-04-01</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>25.0</td>\n",
       "      <td>2018-05-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1298154</td>\n",
       "      <td>2014-04-01</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>36.0</td>\n",
       "      <td>2017-04-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>619352</td>\n",
       "      <td>2017-07-01</td>\n",
       "      <td>Current</td>\n",
       "      <td>20.0</td>\n",
       "      <td>2019-03-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>604411</td>\n",
       "      <td>2017-08-01</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2017-12-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1318677</td>\n",
       "      <td>2014-03-01</td>\n",
       "      <td>Fully Paid</td>\n",
       "      <td>16.0</td>\n",
       "      <td>2015-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>172573</td>\n",
       "      <td>2015-08-01</td>\n",
       "      <td>Charged Off</td>\n",
       "      <td>16.0</td>\n",
       "      <td>2016-12-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1364200</td>\n",
       "      <td>2018-12-01</td>\n",
       "      <td>Current</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2019-03-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        issue_date  loan_status  paid_months last_pymnt_date\n",
       "937525  2017-05-01      Current         22.0      2019-03-01\n",
       "518949  2018-01-01      Current         14.0      2019-03-01\n",
       "511071  2018-01-01   Fully Paid         12.0      2019-01-01\n",
       "720591  2016-04-01   Fully Paid         25.0      2018-05-01\n",
       "1298154 2014-04-01   Fully Paid         36.0      2017-04-01\n",
       "619352  2017-07-01      Current         20.0      2019-03-01\n",
       "604411  2017-08-01   Fully Paid          4.0      2017-12-01\n",
       "1318677 2014-03-01   Fully Paid         16.0      2015-07-01\n",
       "172573  2015-08-01  Charged Off         16.0      2016-12-01\n",
       "1364200 2018-12-01      Current          3.0      2019-03-01"
      ]
     },
     "execution_count": 283,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accepted[['issue_date','loan_status','paid_months','last_pymnt_date']].sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                             0\n",
       "member_id                2260701\n",
       "loan_amnt                     33\n",
       "funded_amnt                   33\n",
       "funded_amnt_inv               33\n",
       "                          ...   \n",
       "settlement_percentage    2226455\n",
       "settlement_term          2226455\n",
       "issue_date                    33\n",
       "last_pymnt_date             2460\n",
       "paid_months                 2460\n",
       "Length: 154, dtype: int64"
      ]
     },
     "execution_count": 284,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accepted.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Fully Paid                                             1076751\n",
       "Current                                                 878317\n",
       "Charged Off                                             268559\n",
       "Late (31-120 days)                                       21467\n",
       "In Grace Period                                           8436\n",
       "Late (16-30 days)                                         4349\n",
       "Does not meet the credit policy. Status:Fully Paid        1988\n",
       "Does not meet the credit policy. Status:Charged Off        761\n",
       "Default                                                     40\n",
       "NaN                                                         33\n",
       "Name: loan_status, dtype: int64"
      ]
     },
     "execution_count": 285,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accepted['loan_status'].value_counts(dropna=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans = accepted.loc[accepted['loan_status'].isin(['Fully Paid', 'Charged Off', 'Default'])]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1345350, 154)"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Fully Paid     0.80035\n",
       "Charged Off    0.19962\n",
       "Default        0.00003\n",
       "Name: loan_status, dtype: float64"
      ]
     },
     "execution_count": 288,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans['loan_status'].value_counts(normalize=True,dropna=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [],
   "source": [
    "missing_fractions = loans.isnull().mean().sort_values(ascending=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "member_id                                     1.000000\n",
       "next_pymnt_d                                  0.999970\n",
       "orig_projected_additional_accrued_interest    0.997204\n",
       "hardship_type                                 0.995722\n",
       "hardship_reason                               0.995722\n",
       "dtype: float64"
      ]
     },
     "execution_count": 290,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_fractions.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [],
   "source": [
    "keep_list = ['addr_state', 'annual_inc', 'application_type', 'dti', 'earliest_cr_line', 'emp_length', 'emp_title',\n",
    "             'fico_range_high', 'fico_range_low', 'grade', 'home_ownership', 'id', 'initial_list_status', \n",
    "             'installment', 'int_rate', 'issue_d', 'loan_amnt', 'loan_status', 'mort_acc', 'open_acc', 'pub_rec', \n",
    "             'pub_rec_bankruptcies', 'purpose', 'revol_bal', 'revol_util', 'sub_grade', 'term', 'title', 'total_acc',\n",
    "             'verification_status', 'zip_code','paid_months']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans = loans[keep_list]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1345350, 32)"
      ]
     },
     "execution_count": 293,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "addr_state                  0\n",
       "annual_inc                  0\n",
       "application_type            0\n",
       "dti                       374\n",
       "earliest_cr_line            0\n",
       "emp_length              78516\n",
       "emp_title               85791\n",
       "fico_range_high             0\n",
       "fico_range_low              0\n",
       "grade                       0\n",
       "home_ownership              0\n",
       "id                          0\n",
       "initial_list_status         0\n",
       "installment                 0\n",
       "int_rate                    0\n",
       "issue_d                     0\n",
       "loan_amnt                   0\n",
       "loan_status                 0\n",
       "mort_acc                47281\n",
       "open_acc                    0\n",
       "pub_rec                     0\n",
       "pub_rec_bankruptcies      697\n",
       "purpose                     0\n",
       "revol_bal                   0\n",
       "revol_util                857\n",
       "sub_grade                   0\n",
       "term                        0\n",
       "title                   16659\n",
       "total_acc                   0\n",
       "verification_status         0\n",
       "zip_code                    1\n",
       "paid_months              2313\n",
       "dtype: int64"
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dropping rows with na for paid_months and zipcode\n",
    "loans.dropna(axis=0, subset=['paid_months'],inplace=True)\n",
    "loans.dropna(axis=0, subset=['zip_code'],inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans.drop('id', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans.drop('grade', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1343036, 30)"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     1257498\n",
       "unique     377868\n",
       "top       Teacher\n",
       "freq        21236\n",
       "Name: emp_title, dtype: object"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans['emp_title'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans.drop('emp_title', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans['emp_length'].replace(to_replace='10+ years', value='10 years', inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans['emp_length'].replace('< 1 year', '0 years', inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [],
   "source": [
    "def emp_length_to_int(s):\n",
    "    if pd.isnull(s):\n",
    "        return s\n",
    "    else:\n",
    "        return np.int8(s.split()[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans['emp_length'] = loans['emp_length'].apply(emp_length_to_int)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0     107868\n",
       "1.0      88345\n",
       "2.0     121536\n",
       "3.0     107403\n",
       "4.0      80387\n",
       "5.0      83980\n",
       "6.0      62615\n",
       "7.0      59523\n",
       "8.0      60594\n",
       "9.0      50857\n",
       "10.0    441647\n",
       "NaN      78281\n",
       "Name: emp_length, dtype: int64"
      ]
     },
     "execution_count": 305,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans['emp_length'].value_counts(dropna=False).sort_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans.drop('zip_code', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "addr_state\n",
       "DC    0.130836\n",
       "ME    0.137148\n",
       "VT    0.138543\n",
       "IA    0.142857\n",
       "OR    0.143031\n",
       "NH    0.144831\n",
       "WV    0.154320\n",
       "CO    0.154557\n",
       "WA    0.156230\n",
       "SC    0.161133\n",
       "KS    0.166385\n",
       "WY    0.166838\n",
       "MT    0.167627\n",
       "UT    0.169676\n",
       "CT    0.172622\n",
       "RI    0.177524\n",
       "IL    0.179870\n",
       "WI    0.182357\n",
       "GA    0.182664\n",
       "ID    0.187796\n",
       "MA    0.189220\n",
       "CA    0.194341\n",
       "AZ    0.195106\n",
       "AK    0.195543\n",
       "DE    0.195548\n",
       "MN    0.195987\n",
       "TX    0.196830\n",
       "VA    0.198030\n",
       "HI    0.200919\n",
       "MI    0.201825\n",
       "ND    0.203252\n",
       "OH    0.204275\n",
       "NC    0.206237\n",
       "PA    0.206658\n",
       "KY    0.208597\n",
       "NJ    0.210017\n",
       "MD    0.211462\n",
       "MO    0.211702\n",
       "SD    0.211803\n",
       "NM    0.212381\n",
       "TN    0.212805\n",
       "FL    0.213047\n",
       "IN    0.213249\n",
       "NV    0.217215\n",
       "NY    0.219013\n",
       "LA    0.230580\n",
       "OK    0.232942\n",
       "AL    0.235046\n",
       "AR    0.239581\n",
       "NE    0.249930\n",
       "MS    0.259428\n",
       "Name: loan_status, dtype: float64"
      ]
     },
     "execution_count": 307,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.groupby('addr_state')['loan_status'].value_counts(normalize=True).loc[:,'Charged Off'].sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['addr_state', 'annual_inc', 'application_type', 'dti',\n",
       "       'earliest_cr_line', 'emp_length', 'fico_range_high', 'fico_range_low',\n",
       "       'home_ownership', 'initial_list_status', 'installment', 'int_rate',\n",
       "       'issue_d', 'loan_amnt', 'loan_status', 'mort_acc', 'open_acc',\n",
       "       'pub_rec', 'pub_rec_bankruptcies', 'purpose', 'revol_bal', 'revol_util',\n",
       "       'sub_grade', 'term', 'title', 'total_acc', 'verification_status',\n",
       "       'paid_months'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 308,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans.drop('revol_bal',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans['fico_score'] = 0.5*loans['fico_range_low'] + 0.5*loans['fico_range_high']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans.drop(['fico_range_high', 'fico_range_low'], axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans.drop('title',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1343036, 25)"
      ]
     },
     "execution_count": 313,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [],
   "source": [
    "# loans = pd.get_dummies(loans, columns=['sub_grade', 'home_ownership', 'verification_status', 'purpose', 'addr_state', 'initial_list_status', 'application_type'], drop_first=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1343036, 25)"
      ]
     },
     "execution_count": 315,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>dti</th>\n",
       "      <th>earliest_cr_line</th>\n",
       "      <th>emp_length</th>\n",
       "      <th>installment</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>mort_acc</th>\n",
       "      <th>open_acc</th>\n",
       "      <th>...</th>\n",
       "      <th>addr_state_TX</th>\n",
       "      <th>addr_state_UT</th>\n",
       "      <th>addr_state_VA</th>\n",
       "      <th>addr_state_VT</th>\n",
       "      <th>addr_state_WA</th>\n",
       "      <th>addr_state_WI</th>\n",
       "      <th>addr_state_WV</th>\n",
       "      <th>addr_state_WY</th>\n",
       "      <th>initial_list_status_w</th>\n",
       "      <th>application_type_Joint App</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1909397</td>\n",
       "      <td>142000.0</td>\n",
       "      <td>3.93</td>\n",
       "      <td>2002</td>\n",
       "      <td>2.0</td>\n",
       "      <td>728.61</td>\n",
       "      <td>23.76</td>\n",
       "      <td>25450.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>972834</td>\n",
       "      <td>89000.0</td>\n",
       "      <td>12.32</td>\n",
       "      <td>1997</td>\n",
       "      <td>10.0</td>\n",
       "      <td>972.51</td>\n",
       "      <td>15.99</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>297938</td>\n",
       "      <td>150000.0</td>\n",
       "      <td>20.46</td>\n",
       "      <td>2001</td>\n",
       "      <td>4.0</td>\n",
       "      <td>139.86</td>\n",
       "      <td>15.61</td>\n",
       "      <td>4000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>223521</td>\n",
       "      <td>15732.0</td>\n",
       "      <td>27.08</td>\n",
       "      <td>2002</td>\n",
       "      <td>NaN</td>\n",
       "      <td>194.50</td>\n",
       "      <td>22.99</td>\n",
       "      <td>5025.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>342038</td>\n",
       "      <td>109000.0</td>\n",
       "      <td>9.89</td>\n",
       "      <td>2006</td>\n",
       "      <td>9.0</td>\n",
       "      <td>503.18</td>\n",
       "      <td>12.69</td>\n",
       "      <td>15000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1856293</td>\n",
       "      <td>42000.0</td>\n",
       "      <td>34.03</td>\n",
       "      <td>2002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>352.15</td>\n",
       "      <td>19.05</td>\n",
       "      <td>9600.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1213156</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>17.02</td>\n",
       "      <td>2007</td>\n",
       "      <td>2.0</td>\n",
       "      <td>229.53</td>\n",
       "      <td>9.17</td>\n",
       "      <td>7200.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1121198</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>36.80</td>\n",
       "      <td>1997</td>\n",
       "      <td>2.0</td>\n",
       "      <td>359.64</td>\n",
       "      <td>18.54</td>\n",
       "      <td>14000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>193969</td>\n",
       "      <td>41000.0</td>\n",
       "      <td>8.60</td>\n",
       "      <td>2006</td>\n",
       "      <td>4.0</td>\n",
       "      <td>232.29</td>\n",
       "      <td>9.99</td>\n",
       "      <td>7200.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>197267</td>\n",
       "      <td>35000.0</td>\n",
       "      <td>35.91</td>\n",
       "      <td>2002</td>\n",
       "      <td>7.0</td>\n",
       "      <td>331.15</td>\n",
       "      <td>14.65</td>\n",
       "      <td>9600.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows Ã— 123 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         annual_inc    dti  earliest_cr_line  emp_length  installment  \\\n",
       "1909397    142000.0   3.93              2002         2.0       728.61   \n",
       "972834      89000.0  12.32              1997        10.0       972.51   \n",
       "297938     150000.0  20.46              2001         4.0       139.86   \n",
       "223521      15732.0  27.08              2002         NaN       194.50   \n",
       "342038     109000.0   9.89              2006         9.0       503.18   \n",
       "1856293     42000.0  34.03              2002         1.0       352.15   \n",
       "1213156     30000.0  17.02              2007         2.0       229.53   \n",
       "1121198    100000.0  36.80              1997         2.0       359.64   \n",
       "193969      41000.0   8.60              2006         4.0       232.29   \n",
       "197267      35000.0  35.91              2002         7.0       331.15   \n",
       "\n",
       "         int_rate  loan_amnt  loan_status  mort_acc  open_acc  ...  \\\n",
       "1909397     23.76    25450.0            1       6.0       7.0  ...   \n",
       "972834      15.99    40000.0            1       7.0      12.0  ...   \n",
       "297938      15.61     4000.0            1       2.0      13.0  ...   \n",
       "223521      22.99     5025.0            0       0.0      13.0  ...   \n",
       "342038      12.69    15000.0            0       1.0       9.0  ...   \n",
       "1856293     19.05     9600.0            1       0.0      16.0  ...   \n",
       "1213156      9.17     7200.0            1       0.0      15.0  ...   \n",
       "1121198     18.54    14000.0            1       3.0      15.0  ...   \n",
       "193969       9.99     7200.0            1       0.0      16.0  ...   \n",
       "197267      14.65     9600.0            1       0.0       8.0  ...   \n",
       "\n",
       "         addr_state_TX  addr_state_UT  addr_state_VA  addr_state_VT  \\\n",
       "1909397              0              0              0              0   \n",
       "972834               1              0              0              0   \n",
       "297938               0              0              0              0   \n",
       "223521               0              0              0              0   \n",
       "342038               0              0              0              0   \n",
       "1856293              0              0              0              0   \n",
       "1213156              0              0              0              0   \n",
       "1121198              0              0              1              0   \n",
       "193969               0              0              0              0   \n",
       "197267               0              0              0              0   \n",
       "\n",
       "         addr_state_WA  addr_state_WI  addr_state_WV  addr_state_WY  \\\n",
       "1909397              0              0              0              0   \n",
       "972834               0              0              0              0   \n",
       "297938               0              0              0              0   \n",
       "223521               0              0              0              0   \n",
       "342038               0              0              0              0   \n",
       "1856293              0              0              0              0   \n",
       "1213156              0              0              0              0   \n",
       "1121198              0              0              0              0   \n",
       "193969               0              0              0              0   \n",
       "197267               0              0              0              0   \n",
       "\n",
       "         initial_list_status_w  application_type_Joint App  \n",
       "1909397                      0                           0  \n",
       "972834                       1                           0  \n",
       "297938                       0                           0  \n",
       "223521                       1                           0  \n",
       "342038                       1                           0  \n",
       "1856293                      0                           0  \n",
       "1213156                      1                           0  \n",
       "1121198                      1                           0  \n",
       "193969                       1                           0  \n",
       "197267                       0                           0  \n",
       "\n",
       "[10 rows x 123 columns]"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans['term'] = loans['term'].apply(lambda s: np.int8(s.split()[0]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "addr_state                  0\n",
       "annual_inc                  0\n",
       "application_type            0\n",
       "dti                       370\n",
       "earliest_cr_line            0\n",
       "emp_length              78281\n",
       "home_ownership              0\n",
       "initial_list_status         0\n",
       "installment                 0\n",
       "int_rate                    0\n",
       "issue_d                     0\n",
       "loan_amnt                   0\n",
       "loan_status                 0\n",
       "mort_acc                47194\n",
       "open_acc                    0\n",
       "pub_rec                     0\n",
       "pub_rec_bankruptcies      697\n",
       "purpose                     0\n",
       "revol_util                847\n",
       "sub_grade                   0\n",
       "term                        0\n",
       "total_acc                   0\n",
       "verification_status         0\n",
       "paid_months                 0\n",
       "fico_score                  0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 317,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans['earliest_cr_line'] = loans['earliest_cr_line'].apply(lambda s: int(s[-4:]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans['issue_d'] = pd.to_datetime(loans['issue_d'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans.drop('issue_d', axis=1, inplace =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "addr_state                  0\n",
       "annual_inc                  0\n",
       "application_type            0\n",
       "dti                       370\n",
       "earliest_cr_line            0\n",
       "emp_length              78281\n",
       "home_ownership              0\n",
       "initial_list_status         0\n",
       "installment                 0\n",
       "int_rate                    0\n",
       "loan_amnt                   0\n",
       "loan_status                 0\n",
       "mort_acc                47194\n",
       "open_acc                    0\n",
       "pub_rec                     0\n",
       "pub_rec_bankruptcies      697\n",
       "purpose                     0\n",
       "revol_util                847\n",
       "sub_grade                   0\n",
       "term                        0\n",
       "title                   16620\n",
       "total_acc                   0\n",
       "verification_status         0\n",
       "paid_months                 0\n",
       "fico_score                  0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 263,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1.342666e+06\n",
       "mean     1.828455e+01\n",
       "std      1.115548e+01\n",
       "min     -1.000000e+00\n",
       "25%      1.180000e+01\n",
       "50%      1.762000e+01\n",
       "75%      2.406000e+01\n",
       "max      9.990000e+02\n",
       "Name: dti, dtype: float64"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans['dti'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [],
   "source": [
    "def acc_paid (row):\n",
    "    if row['loan_status']=='Fully Paid':\n",
    "        return 1\n",
    "    if row['loan_status'] != 'Fully Paid':\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans['loan_status'] = loans.apply (lambda row: acc_paid(row), axis=1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Creating Dummy Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans = pd.get_dummies(loans, columns=['sub_grade', 'home_ownership', 'verification_status',\n",
    "                                       'purpose', 'addr_state', 'initial_list_status', 'application_type'],\n",
    "                       drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1343036, 124)"
      ]
     },
     "execution_count": 321,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Train/Test Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "loan_status\n",
       "Charged Off     266246\n",
       "Default             40\n",
       "Fully Paid     1076750\n",
       "Name: paid_months, dtype: int64"
      ]
     },
     "execution_count": 265,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.groupby('loan_status')['paid_months'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = loans.drop('paid_months', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y = loans['paid_months']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 352,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_score=lr.score(X_train, Y_train)\n",
    "test_score=lr.score(X_test, Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "linear regression train score: 0.13743027201038183\n",
      "linear regression test score: 0.13929238411872702\n"
     ]
    }
   ],
   "source": [
    "print (\"linear regression train score:\", train_score)\n",
    "print (\"linear regression test score:\", test_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [],
   "source": [
    "rr = Ridge(alpha=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=0.01, copy_X=True, fit_intercept=True, max_iter=None,\n",
       "      normalize=False, random_state=None, solver='auto', tol=0.001)"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rr.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [],
   "source": [
    "ridge_train_score=rr.score(X_train, Y_train)\n",
    "ridge_test_score=rr.score(X_test, Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ridge regression train score: 0.13743027198235902\n",
      "ridge regression test score: 0.13929239963215045\n"
     ]
    }
   ],
   "source": [
    "print (\"ridge regression train score:\", ridge_train_score)\n",
    "print (\"ridge regression test score:\", ridge_test_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>dti</th>\n",
       "      <th>earliest_cr_line</th>\n",
       "      <th>emp_length</th>\n",
       "      <th>installment</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>mort_acc</th>\n",
       "      <th>open_acc</th>\n",
       "      <th>...</th>\n",
       "      <th>addr_state_TX</th>\n",
       "      <th>addr_state_UT</th>\n",
       "      <th>addr_state_VA</th>\n",
       "      <th>addr_state_VT</th>\n",
       "      <th>addr_state_WA</th>\n",
       "      <th>addr_state_WI</th>\n",
       "      <th>addr_state_WV</th>\n",
       "      <th>addr_state_WY</th>\n",
       "      <th>initial_list_status_w</th>\n",
       "      <th>application_type_Joint App</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1926559</td>\n",
       "      <td>57500.0</td>\n",
       "      <td>2.09</td>\n",
       "      <td>2007</td>\n",
       "      <td>4.0</td>\n",
       "      <td>74.25</td>\n",
       "      <td>13.11</td>\n",
       "      <td>2200.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>188103</td>\n",
       "      <td>40000.0</td>\n",
       "      <td>32.34</td>\n",
       "      <td>2005</td>\n",
       "      <td>10.0</td>\n",
       "      <td>53.15</td>\n",
       "      <td>16.55</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>414167</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>16.49</td>\n",
       "      <td>2003</td>\n",
       "      <td>1.0</td>\n",
       "      <td>123.04</td>\n",
       "      <td>15.99</td>\n",
       "      <td>3500.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>555125</td>\n",
       "      <td>76000.0</td>\n",
       "      <td>11.97</td>\n",
       "      <td>2007</td>\n",
       "      <td>9.0</td>\n",
       "      <td>576.41</td>\n",
       "      <td>13.59</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>250067</td>\n",
       "      <td>38900.0</td>\n",
       "      <td>12.22</td>\n",
       "      <td>2005</td>\n",
       "      <td>8.0</td>\n",
       "      <td>425.16</td>\n",
       "      <td>16.55</td>\n",
       "      <td>12000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 123 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         annual_inc    dti  earliest_cr_line  emp_length  installment  \\\n",
       "1926559     57500.0   2.09              2007         4.0        74.25   \n",
       "188103      40000.0  32.34              2005        10.0        53.15   \n",
       "414167      50000.0  16.49              2003         1.0       123.04   \n",
       "555125      76000.0  11.97              2007         9.0       576.41   \n",
       "250067      38900.0  12.22              2005         8.0       425.16   \n",
       "\n",
       "         int_rate  loan_amnt  loan_status  mort_acc  open_acc  ...  \\\n",
       "1926559     13.11     2200.0            1       0.0       4.0  ...   \n",
       "188103      16.55     1500.0            1       0.0      12.0  ...   \n",
       "414167      15.99     3500.0            1       0.0       8.0  ...   \n",
       "555125      13.59    25000.0            1       3.0       8.0  ...   \n",
       "250067      16.55    12000.0            1       0.0       5.0  ...   \n",
       "\n",
       "         addr_state_TX  addr_state_UT  addr_state_VA  addr_state_VT  \\\n",
       "1926559              0              0              0              0   \n",
       "188103               0              0              1              0   \n",
       "414167               0              0              0              0   \n",
       "555125               0              0              0              0   \n",
       "250067               0              0              0              0   \n",
       "\n",
       "         addr_state_WA  addr_state_WI  addr_state_WV  addr_state_WY  \\\n",
       "1926559              0              0              0              0   \n",
       "188103               0              0              0              0   \n",
       "414167               0              0              0              0   \n",
       "555125               0              0              0              0   \n",
       "250067               0              0              0              0   \n",
       "\n",
       "         initial_list_status_w  application_type_Joint App  \n",
       "1926559                      0                           0  \n",
       "188103                       0                           0  \n",
       "414167                       0                           0  \n",
       "555125                       1                           0  \n",
       "250067                       0                           0  \n",
       "\n",
       "[5 rows x 123 columns]"
      ]
     },
     "execution_count": 336,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "metadata": {},
   "outputs": [],
   "source": [
    "loans = loans.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "annual_inc                    0\n",
       "dti                           0\n",
       "earliest_cr_line              0\n",
       "emp_length                    0\n",
       "installment                   0\n",
       "                             ..\n",
       "addr_state_WI                 0\n",
       "addr_state_WV                 0\n",
       "addr_state_WY                 0\n",
       "initial_list_status_w         0\n",
       "application_type_Joint App    0\n",
       "Length: 123, dtype: int64"
      ]
     },
     "execution_count": 341,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1218136, 123)"
      ]
     },
     "execution_count": 359,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 353,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jameskim/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:737: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n",
      "  warn(\"Some inputs do not have OOB scores. \"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
       "                      max_features='auto', max_leaf_nodes=None,\n",
       "                      min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                      min_samples_leaf=1, min_samples_split=2,\n",
       "                      min_weight_fraction_leaf=0.0, n_estimators=20, n_jobs=-1,\n",
       "                      oob_score=True, random_state=42, verbose=0,\n",
       "                      warm_start=False)"
      ]
     },
     "execution_count": 353,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#rank all features, i.e continue the elimination until the last one\n",
    "rf = RandomForestRegressor(n_estimators = 20,\n",
    "                           n_jobs = -1,\n",
    "                           oob_score = True,\n",
    "                           bootstrap = True,\n",
    "                           random_state = 42)\n",
    "rf.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "metadata": {},
   "outputs": [],
   "source": [
    "names = X_train.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 356,
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_name_importance_pair = list(zip(names, list(rf.feature_importances_)))\n",
    "feature_name_importance_pair.sort(key = lambda x: x[1])\n",
    "feature_name_importance_pair = feature_name_importance_pair[-20:]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 357,
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_names = list(map(lambda x: x[0], feature_name_importance_pair))\n",
    "feature_importances = list(map(lambda x: x[1], feature_name_importance_pair))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,7));\n",
    "plt.barh(feature_names,feature_importances);\n",
    "plt.xlabel('Feature Importance', fontsize=15);\n",
    "plt.ylabel('Feature Name', fontsize=15);\n",
    "plt.title('Top 20 Important Features by RandomForest', fontsize=20);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>int_rate</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>dti</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>paid_months</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>13.99</td>\n",
       "      <td>29.7</td>\n",
       "      <td>5.91</td>\n",
       "      <td>55000.0</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>11.99</td>\n",
       "      <td>19.2</td>\n",
       "      <td>16.06</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>10.78</td>\n",
       "      <td>56.2</td>\n",
       "      <td>10.78</td>\n",
       "      <td>63000.0</td>\n",
       "      <td>18.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>22.45</td>\n",
       "      <td>64.5</td>\n",
       "      <td>25.37</td>\n",
       "      <td>104433.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>13.44</td>\n",
       "      <td>68.4</td>\n",
       "      <td>10.20</td>\n",
       "      <td>34000.0</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2260688</td>\n",
       "      <td>9.49</td>\n",
       "      <td>34.0</td>\n",
       "      <td>20.59</td>\n",
       "      <td>130000.0</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2260690</td>\n",
       "      <td>13.99</td>\n",
       "      <td>85.2</td>\n",
       "      <td>22.03</td>\n",
       "      <td>180792.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2260691</td>\n",
       "      <td>14.49</td>\n",
       "      <td>27.4</td>\n",
       "      <td>10.34</td>\n",
       "      <td>157000.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2260692</td>\n",
       "      <td>12.79</td>\n",
       "      <td>55.0</td>\n",
       "      <td>12.25</td>\n",
       "      <td>150000.0</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2260697</td>\n",
       "      <td>14.49</td>\n",
       "      <td>68.1</td>\n",
       "      <td>18.30</td>\n",
       "      <td>110000.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1218136 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         int_rate  revol_util    dti  annual_inc  paid_months\n",
       "0           13.99        29.7   5.91     55000.0         37.0\n",
       "1           11.99        19.2  16.06     65000.0          6.0\n",
       "2           10.78        56.2  10.78     63000.0         18.0\n",
       "4           22.45        64.5  25.37    104433.0          7.0\n",
       "5           13.44        68.4  10.20     34000.0         17.0\n",
       "...           ...         ...    ...         ...          ...\n",
       "2260688      9.49        34.0  20.59    130000.0         22.0\n",
       "2260690     13.99        85.2  22.03    180792.0         21.0\n",
       "2260691     14.49        27.4  10.34    157000.0          5.0\n",
       "2260692     12.79        55.0  12.25    150000.0         17.0\n",
       "2260697     14.49        68.1  18.30    110000.0         12.0\n",
       "\n",
       "[1218136 rows x 5 columns]"
      ]
     },
     "execution_count": 363,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top4 = loans[['int_rate','revol_util','dti','annual_inc','paid_months']]\n",
    "top4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "metadata": {},
   "outputs": [],
   "source": [
    "X1 = top4.drop('paid_months',axis=1)\n",
    "Y1 = top4['paid_months']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 365,
   "metadata": {},
   "outputs": [],
   "source": [
    "X1_train, X1_test, Y1_train, Y1_test = train_test_split(X1, Y1, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "metadata": {},
   "outputs": [],
   "source": [
    "rr = Ridge(alpha=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 374,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=1, copy_X=True, fit_intercept=True, max_iter=None, normalize=False,\n",
       "      random_state=None, solver='auto', tol=0.001)"
      ]
     },
     "execution_count": 374,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rr.fit(X1_train, Y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 375,
   "metadata": {},
   "outputs": [],
   "source": [
    "ridge_train_score=rr.score(X1_train, Y1_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ridge regression train score: 0.043133731532328023\n"
     ]
    }
   ],
   "source": [
    "print (\"ridge regression train score:\", ridge_train_score)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 392,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "paid_months\n",
       "0.0      8346\n",
       "1.0     25413\n",
       "2.0     22779\n",
       "3.0     25667\n",
       "4.0     28375\n",
       "        ...  \n",
       "63.0       24\n",
       "64.0        8\n",
       "65.0       12\n",
       "66.0        3\n",
       "67.0        2\n",
       "Name: loan_status, Length: 68, dtype: int64"
      ]
     },
     "execution_count": 392,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.groupby('paid_months')['loan_status'].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 393,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1218136, 123)"
      ]
     },
     "execution_count": 393,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "metadata": {},
   "outputs": [],
   "source": [
    "fullypaid = loans.loc[loans['loan_status'] == 1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>dti</th>\n",
       "      <th>earliest_cr_line</th>\n",
       "      <th>emp_length</th>\n",
       "      <th>installment</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>mort_acc</th>\n",
       "      <th>open_acc</th>\n",
       "      <th>...</th>\n",
       "      <th>addr_state_TX</th>\n",
       "      <th>addr_state_UT</th>\n",
       "      <th>addr_state_VA</th>\n",
       "      <th>addr_state_VT</th>\n",
       "      <th>addr_state_WA</th>\n",
       "      <th>addr_state_WI</th>\n",
       "      <th>addr_state_WV</th>\n",
       "      <th>addr_state_WY</th>\n",
       "      <th>initial_list_status_w</th>\n",
       "      <th>application_type_Joint App</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>55000.0</td>\n",
       "      <td>5.91</td>\n",
       "      <td>2003</td>\n",
       "      <td>10.0</td>\n",
       "      <td>123.03</td>\n",
       "      <td>13.99</td>\n",
       "      <td>3600.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>16.06</td>\n",
       "      <td>1999</td>\n",
       "      <td>10.0</td>\n",
       "      <td>820.28</td>\n",
       "      <td>11.99</td>\n",
       "      <td>24700.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>63000.0</td>\n",
       "      <td>10.78</td>\n",
       "      <td>2000</td>\n",
       "      <td>10.0</td>\n",
       "      <td>432.66</td>\n",
       "      <td>10.78</td>\n",
       "      <td>20000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>104433.0</td>\n",
       "      <td>25.37</td>\n",
       "      <td>1998</td>\n",
       "      <td>3.0</td>\n",
       "      <td>289.91</td>\n",
       "      <td>22.45</td>\n",
       "      <td>10400.0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>34000.0</td>\n",
       "      <td>10.20</td>\n",
       "      <td>1987</td>\n",
       "      <td>4.0</td>\n",
       "      <td>405.18</td>\n",
       "      <td>13.44</td>\n",
       "      <td>11950.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2260684</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>26.40</td>\n",
       "      <td>1980</td>\n",
       "      <td>8.0</td>\n",
       "      <td>487.47</td>\n",
       "      <td>10.49</td>\n",
       "      <td>15000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2260686</td>\n",
       "      <td>119000.0</td>\n",
       "      <td>32.73</td>\n",
       "      <td>1992</td>\n",
       "      <td>10.0</td>\n",
       "      <td>559.85</td>\n",
       "      <td>14.49</td>\n",
       "      <td>23800.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2260688</td>\n",
       "      <td>130000.0</td>\n",
       "      <td>20.59</td>\n",
       "      <td>2004</td>\n",
       "      <td>5.0</td>\n",
       "      <td>377.95</td>\n",
       "      <td>9.49</td>\n",
       "      <td>18000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2260690</td>\n",
       "      <td>180792.0</td>\n",
       "      <td>22.03</td>\n",
       "      <td>2002</td>\n",
       "      <td>9.0</td>\n",
       "      <td>683.94</td>\n",
       "      <td>13.99</td>\n",
       "      <td>29400.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2260692</td>\n",
       "      <td>150000.0</td>\n",
       "      <td>12.25</td>\n",
       "      <td>1997</td>\n",
       "      <td>10.0</td>\n",
       "      <td>362.34</td>\n",
       "      <td>12.79</td>\n",
       "      <td>16000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>979418 rows Ã— 123 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         annual_inc    dti  earliest_cr_line  emp_length  installment  \\\n",
       "0           55000.0   5.91              2003        10.0       123.03   \n",
       "1           65000.0  16.06              1999        10.0       820.28   \n",
       "2           63000.0  10.78              2000        10.0       432.66   \n",
       "4          104433.0  25.37              1998         3.0       289.91   \n",
       "5           34000.0  10.20              1987         4.0       405.18   \n",
       "...             ...    ...               ...         ...          ...   \n",
       "2260684     60000.0  26.40              1980         8.0       487.47   \n",
       "2260686    119000.0  32.73              1992        10.0       559.85   \n",
       "2260688    130000.0  20.59              2004         5.0       377.95   \n",
       "2260690    180792.0  22.03              2002         9.0       683.94   \n",
       "2260692    150000.0  12.25              1997        10.0       362.34   \n",
       "\n",
       "         int_rate  loan_amnt  loan_status  mort_acc  open_acc  ...  \\\n",
       "0           13.99     3600.0            1       1.0       7.0  ...   \n",
       "1           11.99    24700.0            1       4.0      22.0  ...   \n",
       "2           10.78    20000.0            1       5.0       6.0  ...   \n",
       "4           22.45    10400.0            1       6.0      12.0  ...   \n",
       "5           13.44    11950.0            1       0.0       5.0  ...   \n",
       "...           ...        ...          ...       ...       ...  ...   \n",
       "2260684     10.49    15000.0            1       2.0      24.0  ...   \n",
       "2260686     14.49    23800.0            1       5.0      13.0  ...   \n",
       "2260688      9.49    18000.0            1       3.0      17.0  ...   \n",
       "2260690     13.99    29400.0            1       3.0      16.0  ...   \n",
       "2260692     12.79    16000.0            1       0.0      12.0  ...   \n",
       "\n",
       "         addr_state_TX  addr_state_UT  addr_state_VA  addr_state_VT  \\\n",
       "0                    0              0              0              0   \n",
       "1                    0              0              0              0   \n",
       "2                    0              0              0              0   \n",
       "4                    0              0              0              0   \n",
       "5                    0              0              0              0   \n",
       "...                ...            ...            ...            ...   \n",
       "2260684              0              0              0              0   \n",
       "2260686              0              0              0              0   \n",
       "2260688              1              0              0              0   \n",
       "2260690              0              0              0              0   \n",
       "2260692              0              0              0              0   \n",
       "\n",
       "         addr_state_WA  addr_state_WI  addr_state_WV  addr_state_WY  \\\n",
       "0                    0              0              0              0   \n",
       "1                    0              0              0              0   \n",
       "2                    0              0              0              0   \n",
       "4                    0              0              0              0   \n",
       "5                    0              0              0              0   \n",
       "...                ...            ...            ...            ...   \n",
       "2260684              0              0              0              0   \n",
       "2260686              0              0              0              0   \n",
       "2260688              0              0              0              0   \n",
       "2260690              0              0              0              0   \n",
       "2260692              0              0              0              0   \n",
       "\n",
       "         initial_list_status_w  application_type_Joint App  \n",
       "0                            1                           0  \n",
       "1                            1                           0  \n",
       "2                            1                           1  \n",
       "4                            1                           0  \n",
       "5                            1                           0  \n",
       "...                        ...                         ...  \n",
       "2260684                      0                           0  \n",
       "2260686                      0                           0  \n",
       "2260688                      0                           0  \n",
       "2260690                      0                           0  \n",
       "2260692                      0                           0  \n",
       "\n",
       "[979418 rows x 123 columns]"
      ]
     },
     "execution_count": 395,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fullypaid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "metadata": {},
   "outputs": [],
   "source": [
    "X2 = fullypaid.drop('paid_months',axis = 1)\n",
    "Y2 = fullypaid['paid_months']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "metadata": {},
   "outputs": [],
   "source": [
    "X2_train, X2_test, Y2_train, Y2_test = train_test_split(X2, Y2, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jameskim/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:737: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n",
      "  warn(\"Some inputs do not have OOB scores. \"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
       "                      max_features='auto', max_leaf_nodes=None,\n",
       "                      min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                      min_samples_leaf=1, min_samples_split=2,\n",
       "                      min_weight_fraction_leaf=0.0, n_estimators=20, n_jobs=-1,\n",
       "                      oob_score=True, random_state=42, verbose=0,\n",
       "                      warm_start=False)"
      ]
     },
     "execution_count": 398,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#rank all features, i.e continue the elimination until the last one\n",
    "rf = RandomForestRegressor(n_estimators = 20,\n",
    "                           n_jobs = -1,\n",
    "                           oob_score = True,\n",
    "                           bootstrap = True,\n",
    "                           random_state = 42)\n",
    "rf.fit(X2_train, Y2_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 399,
   "metadata": {},
   "outputs": [],
   "source": [
    "names = X2_train.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_name_importance_pair = list(zip(names, list(rf.feature_importances_)))\n",
    "feature_name_importance_pair.sort(key = lambda x: x[1])\n",
    "feature_name_importance_pair = feature_name_importance_pair[-20:]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_names = list(map(lambda x: x[0], feature_name_importance_pair))\n",
    "feature_importances = list(map(lambda x: x[1], feature_name_importance_pair))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 402,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,7));\n",
    "plt.barh(feature_names,feature_importances);\n",
    "plt.xlabel('Feature Importance', fontsize=15);\n",
    "plt.ylabel('Feature Name', fontsize=15);\n",
    "plt.title('Top 20 Important Features by RandomForest', fontsize=20);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "loans1 = loans.drop('paid_months',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1218136, 122)"
      ]
     },
     "execution_count": 444,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "loans1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "metadata": {},
   "outputs": [],
   "source": [
    "X3 = loans1.drop('loan_status', axis=1)\n",
    "Y3 = loans1['loan_status']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "metadata": {},
   "outputs": [],
   "source": [
    "X3_train, X3_test, Y3_train, Y3_test = train_test_split(X3, Y3, test_size=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jameskim/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='warn', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 448,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X3_train, X3_test, Y3_train, Y3_test = train_test_split(X3, Y3, test_size=0.3, random_state=0)\n",
    "logreg = LogisticRegression()\n",
    "logreg.fit(X3_train, Y3_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of logistic regression classifier on test set: 0.80\n"
     ]
    }
   ],
   "source": [
    "Y_pred = logreg.predict(X3_test)\n",
    "print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X3_test, Y3_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  4873  66653]\n",
      " [  4686 289229]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_matrix = confusion_matrix(Y3_test, Y_pred)\n",
    "print(confusion_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jameskim/opt/anaconda3/lib/python3.7/site-packages/sklearn/ensemble/forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "                       max_depth=2, max_features='auto', max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators='warn',\n",
       "                       n_jobs=None, oob_score=False, random_state=0, verbose=0,\n",
       "                       warm_start=False)"
      ]
     },
     "execution_count": 440,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = RandomForestClassifier(max_depth=2, random_state=0)\n",
    "clf.fit(X3_train, Y3_train)\n",
    "RandomForestClassifier(max_depth=2, random_state=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 441,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of random forest classifier on test set: 0.80\n"
     ]
    }
   ],
   "source": [
    "Y_pred1 = clf.predict(X3_test)\n",
    "print('Accuracy of random forest classifier on test set: {:.2f}'.format(clf.score(X3_test, Y3_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[     0  71526]\n",
      " [     0 293915]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_matrix = confusion_matrix(Y3_test, Y_pred1)\n",
    "print(confusion_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
